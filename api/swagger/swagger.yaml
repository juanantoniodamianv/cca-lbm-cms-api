swagger: "2.0"
info: 
  version: "1.0.0"
  title: "CCA-LBM API Documentation"
host: cca-lbm-api-dev.ballastlane.com
basePath: /v1
schemes: 
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /user/signup:
    post:
      summary: Creates a new user account.
      consumes:
        - application/json
      parameters:
        - in: body
          name: userSignUp
          description: The user to create.
          schema:
            $ref: "#/definitions/UserSignUp"
      responses:
          200:
            description: User created successfully.
          401:
            description: Password doesn't match.
          400:
            description: User could not be created.        
  /user/login:
    put:
      summary: User Account Access.
      consumes:
        - application/json
      parameters:
        - in: body
          name: userLogin
          description: Access a user account
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
          200:
            description: Successfully signed in.
          401:
            description: Invalid email or password.

  /users:
    get:
      summary: Get all users account.
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token.
          type: string
          required: true
        - in: query
          name: limit
          description: Set the maximum number of records to retrieve.
          type: number
          required: false
        - in: query
          name: skip
          description: Indicate a number of records to skip before returning the results.
          type: number
          required: false
        - in: query
          name: sort
          description: Set the order in which retrieved records should be returned. Please mention here, columnName followed by space with desc or asc.
          type: string
          required: false
      responses:
          200:
            description: Get all users account.
          401:
            description: No authorization header was found.

  /user/{id}:
    get:
      summary: Get user account.
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token.
          type: string
          required: true
        - in: path
          name: id
          description: The user id.
          type: string
          required: true
      responses:
          200:
            description: Get user account.
          401:
            description: No authorization header was found.
    put:
      summary: Update user account.
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token.
          type: string
          required: true
        - in: path
          name: id
          description: The user id.
          type: string
          required: true
        - in: body
          name: userUpdate
          description: Update user account.
          schema:
            $ref: "#/definitions/UserUpdate"
      responses:
        200:
          description: User updated succesfully.
        400:
          description: User could not be updated.
    delete:
      summary: Delete user account.
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token. You need provided administrator account to perform this action.
          type: string
          required: true
        - in: path
          name: id
          description: The user id.
          type: string
          required: true
      responses:
        200:
          description: User destroyed succesfully.
        400:
          description: User could not be destroyed.

  /users/search:
    get:
      summary: Search user account.
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token.
          type: string
          required: true
        - in: query
          name: value
          description: Value to find.
          type: string
          required: true
      responses:
        200:
          description: Users match.
        204:
          description: There are no users that match the value entered.

  /forgot:
    post:
      summary: Forgot password.
      consumes:
        - application/json
      parameters:
        - in: body
          name: forgotPassword
          description: The email account that you want to recover the password
          schema:
            $ref: "#/definitions/ForgotPassword"
      responses:
        200:
          description: The instruction to reset your password has been sent to your email.
        401:
          description: This email is not registered.

  /reset/{token}:
    post:
      summary: Reset password account
      consumes:
        - application/json
      parameters:
        - in: path
          name: token
          description: The token what has been sended on your email.
          type: string
          required: true
        - in: body
          name: resetPassword
          description: Reset the password account.
          schema:
            $ref: "#/definitions/ResetPassword"
      responses:
        200:
          description: Password successfully changed.
        400:
          description: Password could not be updated.
        401:
          description: The provided password token is invalid, expired, or has already been used.

  /message:
    post:
      summary: Create new message
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: body
          name: newMessage
          description: The new message
          schema:
            $ref: "#/definitions/MessageNew"
      responses:
        200:
          description: Message created succesfully
        404:
          description: Message could not be created, title is already create.
        400:
          description: Message could not be created, invalid data.
  
  /message/{id}:
    put:
      summary: Update message
      consumes: 
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token.
          type: string
          required: true
        - in: path
          name: id
          description: The message id.
          type: string
          required: true
        - in: body
          name: updateMessage
          description: Update the message
          schema:
            $ref: "#/definitions/MessageUpdate"     
      responses:
        200:
          description: Message updated succesfully.
        404:
          description: Message could not be updated, not has been create with this id. 
        400: 
          description: Message could not be updated.

    delete:
      summary: Destroy message
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: id
          description: The message id.
          type: string
          required: true
        - in: body
          name: destroyMessage
          description: Destroy the message
          schema:
            $ref: "#/definitions/MessageDestroy"
      responses:
        200:
          description: Message destroyed succesfully.
        404:
          description: Message could not be destroyed, not has been create with this id. 
        400: 
          description: Message could not be destroyed.

    get:
      summary: Get message
      consumes: 
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: id
          description: The message id.
          type: string
          required: true
      responses:
        200:
          description: A message has been retrieved
        204:
          description: Not has been create with this id.
  
  /messages:
    get:
      summary: Get all messages
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
      responses:
        200:
          description: Messages has been retrieved
        204:
          description: No content

  /location:
    post:
      summary: Create new location
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: body
          name: newLocation
          description: The new location
          schema:
            $ref: "#/definitions/LocationNew"
      responses:
        200: 
          description: Location created succesfully
        404:
          description: Location could not be created, memberId and name has been used.
        400:
          description: Location could not be created, invalid data.

  /location/{id}:
    put:
      summary: Update location
      consumes: 
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token.
          type: string
          required: true
        - in: path
          name: id
          description: The message id.
          type: string
          required: true
        - in: body
          name: updateLocation
          description: Update the location
          schema:
            $ref: "#/definitions/LocationUpdate"
      responses:
        200:
          description: Location updates succesfully.
        404:
          description: Location could not be updated, not has been create with this id. 
        400: 
          description: Location could not be updated.

    delete:
      summary: Delete location
      consumes: 
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token.
          type: string
          required: true
        - in: path
          name: id
          description: The location id.
          type: string
          required: true
      responses:
        200:
          description: Location destroyed succesfully.
        404:
          description: Location could not be destroyed, not has been create with this id. 
        400: 
          description: Location could not be destroyed.
    get:
      summary: Get location
      consumes: 
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: id
          description: The location id.
          type: string
          required: true
      responses:
        200:
          description: A location has been retrieved
        204:
          description: Not has been create with this id.

  /locations:
    get:
      summary: Get all locations
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
      responses:
        200:
          description: Locations has been retrieved
        204:
          description: No content

  /location/{locationid}/messages:
    get:
      summary: Get all messages associated to a specific location
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
      responses:
        200:
          description: Messages has been retrieved
        204:
          description: No content
  
  /location/{locationid}/geofence:
    post:
      summary: Create a new geofence for a specific location
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: body
          name: newGeofence
          description: The new geofence
          schema:
            $ref: "#/definitions/GeofenceNew"
      responses:
        200: 
          description: Geofence created succesfully.
        400:
          description: Geofence could not be created, invalid data.
        401:
          description: Geofence could not be created, name is already create.

  /location/{locationid}/geofence/{geofenceid}:
    get:
      summary: Get geofence information for a specific geofence id
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: path
          name: geofenceid
          description: The geofence id.
          type: string
          required: true
      responses:
        200: 
          description: Geofence has been retrieved.
        204:
          description: No content.

    put:
      summary: Update geofence information for a specific geofence id
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: path
          name: geofenceid
          description: The geofence id.
          type: string
          required: true
        - in: body
          name: updateGeofence
          description: Update geofence
          schema:
            $ref: "#/definitions/GeofenceNew"
      responses:
        200: 
          description: Geofence updated succesfully.
        400:
          description: Geofence could not be updated.

    delete:
      summary: Delete geofence
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: path
          name: geofenceid
          description: The geofence id.
          type: string
          required: true
      responses:
        200: 
          description: Geofence destroyed succesfully.
        400:
          description: Geofence could not be destroyed.

  /locations/geofences:
    get:
      summary: Retrieve all geofences with their locations.
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
      responses:
        200: 
          description: All geofences has been retrieved with their locations.
        204:
          description: No content.

  /locations/{locationid}/geofences:
    get:
      summary: Get all geofences for a specific location
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
      responses:
        200: 
          description: All geofences has been retrieved with specific location.
        204:
          description: No content.


  /location/{locationid}/beacon:
    post:
      summary: Create a new beacon for a specific location
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: body
          name: newBeacon
          description: The new beacon
          schema:
            $ref: "#/definitions/BeaconNew"
      responses:
        200: 
          description: Beacon created succesfully.
        400:
          description: Beacon could not be created, invalid data.
        401:
          description: Beacon could not be created, name is already create.

  /location/{locationid}/beacon/{beaconid}:
    get:
      summary: Get beacon information for a specific beacon id
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: path
          name: beaconid 
          description: The beacon id.
          type: string
          required: true
      responses:
        200: 
          description: Beacon has been retrieved.
        204:
          description: No content.

    put:
      summary: Update beacon information for a specific beacon id
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: path
          name: beaconid
          description: The beacon id.
          type: string
          required: true
        - in: body
          name: updateBeacon
          description: Update beacon
          schema:
            $ref: "#/definitions/BeaconNew"
      responses:
        200: 
          description: Beacon updated succesfully.
        400:
          description: Beacon could not be updated.

    delete:
      summary: Delete beacon
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
        - in: path
          name: beaconid
          description: The beacon id.
          type: string
          required: true
      responses:
        200: 
          description: Beacon destroyed succesfully.
        400:
          description: Beacon could not be destroyed.

  /locations/beacons:
    get:
      summary: Retrieve all beacons with their locations.
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
      responses:
        200: 
          description: All beacons has been retrieved with their locations.
        204:
          description: No content.

  /locations/{locationid}/beacons:
    get:
      summary: Get all beacons for a specific location
      consumes:
        - application/json
      parameters:
        - in: header
          name: token
          description: Authorization token
          type: string
          required: true
        - in: path
          name: locationid
          description: The location id.
          type: string
          required: true
      responses:
        200: 
          description: All beacons has been retrieved with specific location.
        204:
          description: No content.

  /notifications:
    post:
      summary: Called when device has entered a specified Geofence or found a beacon.
      consumes:
        - application/json
      parameters:
        - in: body
          name: newNotification
          description: Create notification
          schema:
            $ref: "#/definitions/NotificationNew"
      responses: 
        200:
          description: Ok
        400:
          description: Error
    
    get:
      summary: Get a list of all notifications sent
      consumes:
        - application/json
      parameters:
        - in: query
          name: locationid
          description: Location Id.
          type: string
          required: false
      responses:
        200:
          description: Ok
        204:
          description: Not results retrieved
        400:
          description: Error     

  /locations/location-number/{locationNumber}:
    get:
      summary: Get all beacons and geofences for a specific location
      consumes:
        - application/json
      parameters:
        - in: path
          name: locationNumber
          description: The location number
          type: string
          required: true
      responses:
        200: 
          description: All beacons and geofences has been retrieved with specific location.
        204:
          description: No content.

definitions:
  UserSignUp:           
    type: object
    required:
      - email
      - password
      - confirmPassword
      - userType
    properties:
      email:
        type: string
      password:
        type: string
      confirmPassword:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      userType:
        type: string
        description: Type of role admin or normal.
      organization:
        type: string
  UserLogin:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  UserUpdate:
    type: object
    required:
      - password
      - confirmPassword
      - userType
    properties:
      password:
        type: string
      confirmPassword:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      userType:
        type: string
      organization:
        type: string
  ForgotPassword:
    type: object
    required:
      - email
    properties:
      email:
        type: string
  ResetPassword:
    type: object
    required:
      - password
      - confirmPassword
    properties:
      password:
        type: string
      confirmPassword:
        type: string
  MessageNew:
    type: object
    required:
      - title
    properties:
      title:
        type: string
      message:
        type: string
      deeplink:
        type: string
  MessageUpdate:
    type: object
    required:
      - title
    properties:
      title:
        type: string
      message:
        type: string
      deeplink:
        type: string
  LocationNew:
    type: object
    required:
      - name
      - memberId
    properties:
      name:
        type: string
      contactEmail:
        type: string
      locationNumber:
        type: string
      memberId:
        type: string
      address1:
        type: string
      address2:
        type: string
      city:
        type: string
      state:
        type: string
      postalCode:
        type: number
      active:
        type: boolean
  LocationUpdate:
    type: object
    required:
      - name
      - memberId
    properties:
      name:
        type: string
      contactEmail:
        type: string
      locationNumber:
        type: string
      memberId:
        type: string
      address1:
        type: string
      address2:
        type: string
      city:
        type: string
      state:
        type: string
      postalCode:
        type: number
      active:
        type: boolean
  MessageDestroy:
    type: object
    required:
      - locations
    properties:
      locations:
        type: string
  GeofenceNew:
    type: object
    required:
      - name
      - radius
      - longitude
      - latitude
      - delayHours
    properties:
      name:
        type: string
      radius:
        type: string
      longitude:
        type: string
      latitude:
        type: string
      messageOnTrigger:
        type: string
      enableMessageOnTrigger:
        type: boolean
      messageAfterDelay:
        type: string
      enableMessageAfterDelay:
        type: boolean
      delayHours:
        type: number
      location:
        type: string
  BeaconNew:
    type: object
    required:
      - name
      - majorId
      - minorId
      - triggerProximity
    properties:
      name:
        type: string
      beaconType:
        type: string
      majorId:
        type: string
      minorId:
        type: string
      triggerProximity:
        type: string
      messageOnTrigger:
        type: string
      enableMessageOnTrigger:
        type: boolean
      messageAfterDelay:
        type: string
      enableMessageAfterDelay:
        type: boolean
      delayHours:
        type: number
      location:
        type: string
  NotificationNew:
    type: object
    required:
      - deviceId
      - triggerType
      - triggerId
    properties:
      deviceId:
        type: string
      triggerType:
        type: string
      triggerId:
        type: string
      